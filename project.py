# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ProjectUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sounddevice as sd
import numpy as np
import queue
import librosa
import sys
import threading
import matplotlib.pyplot as plt
import librosa.display as display


class Ui_MainWindow(object):
    q = queue.Queue()
    Is_micOn = False
    Is_changing = False
    Is_denoise = False

    sr = 44100
    assert sr % 2 == 0
    dt = 1 / sr
    t = np.arange(0, 1, dt)
    n = len(t)
    freq = (1 / (dt * n)) * np.arange(n)
    L = np.arange(1, np.floor(n / 2), dtype="int")

    def __init__(self):
        # init UI
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)

        self.frame = QtWidgets.QFrame(self.centralwidget)

        self.Denoise = QtWidgets.QPushButton(self.frame)
        self.IsChanging_label = QtWidgets.QLabel(self.frame)
        self.IsChanging = QtWidgets.QPushButton(self.frame)
        self.VolumeBar = QtWidgets.QProgressBar(self.frame)
        self.mic_btn = QtWidgets.QPushButton(self.frame)
        self.pitch_mul = QtWidgets.QSlider(self.frame)
        self.pitch_mul_label = QtWidgets.QLabel(self.frame)
        self.pitch_add_label = QtWidgets.QLabel(self.frame)
        self.pitch_add = QtWidgets.QSlider(self.frame)

        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)

        self.InputDevice_label = QtWidgets.QLabel(self.groupBox)
        self.InputDevice_Combo = QtWidgets.QComboBox(self.groupBox)
        self.InputVolume_label = QtWidgets.QLabel(self.groupBox)
        self.InputVolume_bar = QtWidgets.QSlider(self.groupBox)
        self.InputVolumeValue_label = QtWidgets.QLabel(self.groupBox)

        self.OutputDevice_label = QtWidgets.QLabel(self.groupBox)
        self.OutputDevice_Combo = QtWidgets.QComboBox(self.groupBox)
        self.OutputVolume_label = QtWidgets.QLabel(self.groupBox)
        self.OutputVolume_bar = QtWidgets.QSlider(self.groupBox)
        self.OutputVolumeValue_label = QtWidgets.QLabel(self.groupBox)

        self.test_btn = QtWidgets.QPushButton(self.groupBox)
        self.TestVolumeBar = QtWidgets.QProgressBar(self.groupBox)

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget.setObjectName("centralwidget")

        # set frame
        self.frame.setGeometry(QtCore.QRect(9, 9, 781, 241))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        self.frame.setFont(font)
        self.frame.setAutoFillBackground(False)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        # De noise btn
        self.Denoise.setGeometry(QtCore.QRect(70, 10, 171, 41))
        self.Denoise.setObjectName("Denoise")
        self.Denoise.clicked.connect(self.de_noise_btn)

        # Is Changing btn
        self.IsChanging.setGeometry(QtCore.QRect(10, 100, 61, 51))
        self.IsChanging.setText("")
        self.IsChanging.setObjectName("IsChanging")
        self.IsChanging.setIcon(QtGui.QIcon("off-air btn.jpg"))
        self.IsChanging.clicked.connect(self.voice_changing)

        # Is Changing label
        self.IsChanging_label.setGeometry(QtCore.QRect(90, 110, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IsChanging_label.setFont(font)
        self.IsChanging_label.setObjectName("label")

        # mic_btn
        self.mic_btn.setGeometry(QtCore.QRect(80, 160, 61, 61))
        self.mic_btn.setText("")
        self.mic_btn.clicked.connect(self.mic_clicked)

        self.mic_btn.setIcon(QtGui.QIcon("micOff.png"))
        self.mic_btn.setIconSize(QtCore.QSize(128, 128))
        self.mic_btn.setObjectName("mic_btn")

        # VolumeBar
        self.VolumeBar.setGeometry(QtCore.QRect(170, 190, 611, 16))
        self.VolumeBar.setProperty("value", 0)
        self.VolumeBar.setInvertedAppearance(False)
        self.VolumeBar.setFormat("")
        self.VolumeBar.setObjectName("VolumeBar")

        font = QtGui.QFont()
        font.setPointSize(12)
        # pitch_mul
        self.pitch_mul.setGeometry(QtCore.QRect(280, 0, 22, 160))
        self.pitch_mul.setOrientation(QtCore.Qt.Vertical)
        self.pitch_mul.setObjectName("pitch mul")
        self.pitch_mul.valueChanged.connect(self.pitch_mul_SliderValue)
        # pitch_mul label
        self.pitch_mul_label.setGeometry(QtCore.QRect(240, 160, 100, 20))
        self.pitch_mul_label.setFont(font)
        self.pitch_mul_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.pitch_mul_label.setAlignment(QtCore.Qt.AlignCenter)
        self.pitch_mul_label.setObjectName("pitch_mul_label")
        self.pitch_mul.setProperty("value", 43)

        # pitch_add
        self.pitch_add.setGeometry(QtCore.QRect(410, 0, 22, 160))
        self.pitch_add.setOrientation(QtCore.Qt.Vertical)
        self.pitch_add.setObjectName("pitch_add")
        self.pitch_add.valueChanged.connect(self.pitch_add_SliderValue)
        # pitch_add_label
        self.pitch_add_label.setGeometry(QtCore.QRect(340, 160, 160, 21))
        self.pitch_add_label.setFont(font)
        self.pitch_add_label.setAlignment(QtCore.Qt.AlignCenter)
        self.pitch_add_label.setObjectName("pitch_add_label")
        self.pitch_add.setMinimum(0)
        self.pitch_add.setMaximum(80)
        self.pitch_add.setSingleStep(5)

        # set groupBox
        self.groupBox.setGeometry(QtCore.QRect(10, 250, 781, 301))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")

        # input device label
        self.InputDevice_label.setGeometry(QtCore.QRect(60, 30, 221, 20))
        self.InputDevice_label.setObjectName("InputDevice_label")
        # input device combo
        self.InputDevice_Combo.setGeometry(QtCore.QRect(60, 60, 221, 31))
        self.InputDevice_Combo.setObjectName("InputDevice_Combo")
        self.InputDevice_Combo.addItem("")
        self.InputDevice_Combo.addItem("")
        # input volume label
        self.InputVolume_label.setGeometry(QtCore.QRect(60, 130, 221, 21))
        self.InputVolume_label.setObjectName("InputVolume_label")
        # input volume bar
        self.InputVolume_bar.setGeometry(QtCore.QRect(60, 160, 221, 22))
        self.InputVolume_bar.setMaximum(100)
        self.InputVolume_bar.setProperty("value", 100)
        self.InputVolume_bar.setOrientation(QtCore.Qt.Horizontal)
        self.InputVolume_bar.setObjectName("InputVolume_bar")
        self.InputVolume_bar.valueChanged.connect(self.InSliderValue)
        # input volume value label
        self.InputVolumeValue_label.setGeometry(QtCore.QRect(290, 160, 50, 20))
        self.InputVolumeValue_label.setText("")
        self.InputVolumeValue_label.setObjectName("input_volume_value")
        self.InputVolumeValue_label.setText(str(self.InputVolume_bar.value()) + "%")

        # OutputDevice_label
        self.OutputDevice_label.setGeometry(QtCore.QRect(450, 30, 221, 20))
        self.OutputDevice_label.setObjectName("OutputDevice_label")
        self.OutputDevice_Combo.setGeometry(QtCore.QRect(450, 60, 221, 31))
        # Output device Combo
        self.OutputDevice_Combo.setObjectName("OutputDevice_Combo")
        self.OutputDevice_Combo.addItem("")
        self.OutputDevice_Combo.addItem("")
        # Output volume label
        self.OutputVolume_label.setGeometry(QtCore.QRect(450, 130, 221, 21))
        self.OutputVolume_label.setObjectName("OutputVolume_label")
        # Output volume bar
        self.OutputVolume_bar.setGeometry(QtCore.QRect(450, 160, 221, 22))
        self.OutputVolume_bar.setMaximum(100)
        self.OutputVolume_bar.setProperty("value", 100)
        self.OutputVolume_bar.setOrientation(QtCore.Qt.Horizontal)
        self.OutputVolume_bar.setObjectName("OutputVolume_bar")
        self.OutputVolume_bar.valueChanged.connect(self.OutSliderValue)
        # Output volume value label
        self.OutputVolumeValue_label.setGeometry(QtCore.QRect(680, 160, 50, 20))
        self.OutputVolumeValue_label.setText("")
        self.OutputVolumeValue_label.setObjectName("output_volume_value")
        self.OutputVolumeValue_label.setText(str(self.OutputVolume_bar.value()) + "%")

        # test button
        self.test_btn.setGeometry(QtCore.QRect(60, 230, 81, 31))
        self.test_btn.setObjectName("pushButton")
        # test volume bar
        self.TestVolumeBar.setGeometry(QtCore.QRect(170, 240, 601, 16))
        self.TestVolumeBar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.TestVolumeBar.setProperty("value", 0)
        self.TestVolumeBar.setFormat("")
        self.TestVolumeBar.setObjectName("TestVolumeBar")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Man to girl voice changer"))
        self.groupBox.setTitle(_translate("MainWindow", "settings"))
        self.InputDevice_Combo.setItemText(0, _translate("MainWindow", "Default"))
        self.InputDevice_Combo.setItemText(1, _translate("MainWindow", sd.query_devices(kind="input")["name"]))
        self.InputDevice_label.setText(_translate("MainWindow", "Input device"))
        self.OutputDevice_Combo.setItemText(0, _translate("MainWindow", "Default"))
        self.OutputDevice_Combo.setItemText(1, _translate("MainWindow", sd.query_devices(kind="output")["name"]))
        self.OutputDevice_label.setText(_translate("MainWindow", "Output device"))
        self.InputVolume_label.setText(_translate("MainWindow", "Input volume"))
        self.OutputVolume_label.setText(_translate("MainWindow", "Output volume"))
        self.test_btn.setText(_translate("MainWindow", "Test"))
        self.IsChanging_label.setText(_translate("MainWindow", ""))
        self.pitch_add_label.setText(
            _translate("MainWindow", "pitch add: " + str(self.pitch_add.value())))
        self.pitch_mul_label.setText(_translate("MainWindow", "pitch mul: " + str("{0:.2f}".format(1 + self.pitch_mul.value() / 100))))
        self.Denoise.setText(_translate("MainWindow", "Denoise? N"))

    def mic_clicked(self):
        if self.Is_micOn:
            self.mic_btn.setIcon(QtGui.QIcon("micOff.png"))
            self.Is_micOn = False

        else:
            self.mic_btn.setIcon(QtGui.QIcon("micOn.png"))
            self.Is_micOn = True

    def voice_changing(self):
        if self.Is_changing:
            self.IsChanging_label.setText("")
            self.IsChanging.setIcon(QtGui.QIcon("off-air btn.jpg"))
            self.Is_changing = False
        else:
            self.IsChanging_label.setText("Changing")
            self.IsChanging.setIcon(QtGui.QIcon("On-air btn.jpg"))
            self.Is_changing = True

    def de_noise_btn(self):
        if self.Is_denoise:
            self.Denoise.setText("Denoise? N")
            self.Is_denoise = False
        else:
            self.Denoise.setText("Denoise? Y")
            self.Is_denoise = True

    def InSliderValue(self):
        self.InputVolumeValue_label.setText(str(self.InputVolume_bar.value()) + "%")

    def OutSliderValue(self):
        self.OutputVolumeValue_label.setText(str(self.OutputVolume_bar.value()) + "%")

    def pitch_mul_SliderValue(self):
        self.pitch_mul_label.setText("pitch mul: " + str("{0:.2f}".format(1 + self.pitch_mul.value() / 100)))

    def pitch_add_SliderValue(self):
        self.pitch_add_label.setText("pitch add " + str(self.pitch_add.value() / 10))

    # special thanks to https://youtu.be/s2K1JfNR7Sc
    # a hands to hands fft denoise tutorial/lecture
    def failed_voice_change_fft(self, data):
        fhat = np.fft.fft(data.squeeze(), self.n)
        fhat[:60] *= 0 # remove the unknow 50Hz peak in the signal, it is not human voice anyway
        girl_fhat = np.zeros(fhat.shape, dtype=complex)

        for x in range(int(girl_fhat.shape[0]/2)):
            girl_fhat[2*x] = fhat[x]                # up pitch by putting frequencies in x to 2x
                                                    # for example 120Hz is now 240Hz
            if x > 0:
                girl_fhat[2*x-1] = (girl_fhat[2*x] + girl_fhat[2*x-2])/2

        girl_power = girl_fhat * np.conj(girl_fhat) / self.n
        denoised_girl_fhat = (girl_power > (200/self.n)) * girl_fhat

        girl_ifft = np.fft.ifft(denoised_girl_fhat).real

        # girl_output =  girl_ifft
        girl_output = np.zeros(girl_ifft.shape)

        girl_output = self.average_smooth(girl_output)

        man_power = fhat * np.conj(fhat) / self.n

        """"""

        fig, axs = plt.subplots(2,1)


        plt.sca(axs[0])
        # plt.plot(self.freq[self.L], man_power.real[self.L])
        # plt.xlim(self.freq[self.L[0]], 2000)
        # plt.specgram(np.fft.ifft(fhat).real, Fs=self.sr)
        # plt.xlabel('Time')
        # plt.ylabel('frequency')

        plt.plot(self.t, data)

        plt.sca(axs[1])
        # plt.plot(self.freq[self.L], girl_power.real[self.L])
        # plt.xlim(self.freq[self.L[0]], 2000)

        # plt.specgram(girl_output, Fs=self.sr)
        # plt.xlabel('Time')
        # plt.ylabel('frequency')

        plt.plot(self.t, girl_output)

        plt.show()

        return girl_output

    def failed_voice_change_up_pitch(self, data):
        # fig, axs = plt.subplots(2, 1)
        #
        # plt.sca(axs[0])
        # plt.specgram(data, Fs=self.sr, NFFT=2048)
        # plt.ylim(0, 2500)

        data =  0.75 * librosa.effects.pitch_shift(data, self.sr,
                                                  n_steps=self.pitch_mul.value() / 10,
                                                  bins_per_octave=self.pitch_add.value(),
                                                  res_type="kaiser_fast")  + \
                0.15 * librosa.effects.pitch_shift(data, self.sr,
                                                  n_steps=self.pitch_mul.value() * 1.6 / 10,
                                                  bins_per_octave=self.pitch_add.value(),
                                                  res_type="kaiser_fast")

        # plt.sca(axs[1])
        # plt.specgram(data, Fs=self.sr, NFFT=2048)
        # plt.ylim(0, 2500)

        plt.show()
        return data

    def gaussian_smooth(self, data):
        # [0.25, 0.5, 0.25], [0.05, 0.2, 0.5, 0.2, 0.05]
        gaussian = np.array([0.15, 0.2, 0.4, 0.2, 0.15])
        return np.convolve(data, gaussian, "same")

    def average_smooth(self, data):
        average_3 = np.array([1, 1, 1])/3
        average_5 = np.array([1, 1, 1, 1, 1])/5
        average_7 = np.array([1, 1, 1, 1, 1, 1, 1])/7
        average_9 = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1])/9
        average_11 = np.array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) / 11
        return np.convolve(data, average_5, "same")

    def handleNewData(self, indata, outdata, frames, time, status):
        copy = indata.copy()
        # print(indata)
        indata *= 2
        # indata = self.de_noise(indata)

        #print(indata.shape)

        def denoise(data, method):
            if method == "fast":
                return self.average_smooth(data)

            elif method == "fft":
                fhat = np.fft.fft(data.squeeze(), self.n)
                fhat[:60] *= 0  # remove the unknow 50Hz peak in the signal, it is not human voice anyway
                power = fhat * np.conj(fhat)
                indices = power > 20
                fhat = indices * fhat
                return np.fft.ifft(fhat).real

            else:
                return -1

        def stft_to_girl(data):
            data = self.average_smooth(data)
            shape = data.squeeze().shape
            stft = librosa.stft(data.squeeze(), 4096)
            stft_copy = np.zeros(stft.shape, dtype=complex)
            pitch_mul = self.pitch_mul.value() / 100
            pitch_add = self.pitch_add.value() / 10
            print(pitch_mul, pitch_add)

            # increase frequency by moving every frequency bin value
            # to a higher frequency bin
            for x in range(int(stft.shape[0] / 2)):
                stft_copy[int((1 + pitch_mul) * x + pitch_add)] = stft[x]

            istft = librosa.istft(stft_copy)

            # reshape the data as the stft method reduces the output dimension
            istft = librosa.resample(istft, istft.shape[0], self.sr-1)

            return istft

        indata *= self.InputVolume_bar.value() / 100

        """ handles the asynchroneously collected sound chunks """
        if self.Is_micOn:
            indata = indata.squeeze()

            # fig, axs = plt.subplots(2, 1)
            #
            # plt.sca(axs[0])
            # plt.specgram(indata, Fs=self.sr, NFFT=4096)
            # plt.ylim(0, 2500)
            if self.Is_changing and self.Is_denoise:
                indata = stft_to_girl(indata)
                indata = denoise(indata, "fast")

            elif self.Is_changing and not self.Is_denoise:
                # preform man to girl voice change
                indata = stft_to_girl(indata)
            elif not self.Is_changing and self.Is_denoise:
                indata = denoise(indata, "fast")
            elif not self.Is_changing and not self.Is_denoise:
                pass
            # plt.sca(axs[1])
            # plt.specgram(indata, Fs=self.sr, NFFT=4096)
            # plt.ylim(0, 2500)
            # plt.show()

            indata = np.array([indata])
            outdata[:] = indata.T

            outdata *= (self.OutputVolume_bar.value() / 100)

        else:
            outdata[:] = np.zeros(copy.shape)
            outdata *= (self.OutputVolume_bar.value()) / 100

        # smooth the data to erase robotic sound

        # self.threading.Lock.acquire()
        self.VolumeBar.setValue(int(outdata.max() * 100))
        # self.threading.Lock.release()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()

    with sd.Stream(samplerate=ui.sr, blocksize=ui.sr, callback=ui.handleNewData):
        sys.exit(app.exec_())
