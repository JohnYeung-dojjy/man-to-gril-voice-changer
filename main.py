# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ProjectUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sounddevice as sd
import numpy as np
import queue
import librosa
import sys
import matplotlib.pyplot as plt

from media_manager import MediaManager

class Ui_MainWindow(object):
    q = queue.Queue()
    Is_micOn = False
    Is_changing = False
    Is_denoise = False

    sr = 44100
    # sr = 11025
    dt = 1 / sr
    t = np.arange(0, 1, dt)
    n = len(t)
    freq = (1 / (dt * n)) * np.arange(n)
    L = np.arange(1, np.floor(n / 2), dtype="int")

    def __init__(self):
        # init UI
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)

        self.frame = QtWidgets.QFrame(self.centralwidget)

        self.Denoise = QtWidgets.QPushButton(self.frame)
        self.IsChanging_label = QtWidgets.QLabel(self.frame)
        self.IsChanging = QtWidgets.QPushButton(self.frame)
        self.VolumeBar = QtWidgets.QProgressBar(self.frame)
        self.mic_btn = QtWidgets.QPushButton(self.frame)
        self.n_steps = QtWidgets.QSlider(self.frame)
        self.n_steps_label = QtWidgets.QLabel(self.frame)
        self.bins_per_octave_label = QtWidgets.QLabel(self.frame)
        self.bins_per_octave = QtWidgets.QSlider(self.frame)

        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)

        self.InputDevice_label = QtWidgets.QLabel(self.groupBox)
        self.InputDevice_Combo = QtWidgets.QComboBox(self.groupBox)
        self.InputVolume_label = QtWidgets.QLabel(self.groupBox)
        self.InputVolume_bar = QtWidgets.QSlider(self.groupBox)
        self.InputVolumeValue_label = QtWidgets.QLabel(self.groupBox)

        self.OutputDevice_label = QtWidgets.QLabel(self.groupBox)
        self.OutputDevice_Combo = QtWidgets.QComboBox(self.groupBox)
        self.OutputVolume_label = QtWidgets.QLabel(self.groupBox)
        self.OutputVolume_bar = QtWidgets.QSlider(self.groupBox)
        self.OutputVolumeValue_label = QtWidgets.QLabel(self.groupBox)

        self.test_btn = QtWidgets.QPushButton(self.groupBox)
        self.TestVolumeBar = QtWidgets.QProgressBar(self.groupBox)

        self.media_manager = MediaManager()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget.setObjectName("centralwidget")

        # set frame
        self.frame.setGeometry(QtCore.QRect(9, 9, 781, 241))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(18)
        self.frame.setFont(font)
        self.frame.setAutoFillBackground(False)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        # De noise btn
        self.Denoise.setGeometry(QtCore.QRect(70, 10, 171, 41))
        self.Denoise.setObjectName("Denoise")
        self.Denoise.clicked.connect(self.de_noise_btn)

        # Is Changing btn
        self.IsChanging.setGeometry(QtCore.QRect(10, 100, 61, 51))
        self.IsChanging.setText("")
        self.IsChanging.setObjectName("IsChanging")
        self.IsChanging.setIcon(self.media_manager.off_air_btn_icon)
        self.IsChanging.clicked.connect(self.voice_changing)

        # Is Changing label
        self.IsChanging_label.setGeometry(QtCore.QRect(90, 110, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.IsChanging_label.setFont(font)
        self.IsChanging_label.setObjectName("label")

        # mic_btn
        self.mic_btn.setGeometry(QtCore.QRect(80, 160, 61, 61))
        self.mic_btn.setText("")
        self.mic_btn.clicked.connect(self.mic_clicked)

        self.mic_btn.setIcon(self.media_manager.mic_off_icon)
        self.mic_btn.setIconSize(QtCore.QSize(128, 128))
        self.mic_btn.setObjectName("mic_btn")

        # VolumeBar
        self.VolumeBar.setGeometry(QtCore.QRect(170, 190, 611, 16))
        self.VolumeBar.setProperty("value", 0)
        self.VolumeBar.setInvertedAppearance(False)
        self.VolumeBar.setFormat("")
        self.VolumeBar.setObjectName("VolumeBar")

        font = QtGui.QFont()
        font.setPointSize(12)
        # n_steps
        self.n_steps.setGeometry(QtCore.QRect(280, 0, 22, 160))
        self.n_steps.setOrientation(QtCore.Qt.Vertical)
        self.n_steps.setObjectName("n_steps")
        self.n_steps.valueChanged.connect(self.n_stepsSliderValue)
        # n_steps label
        self.n_steps_label.setGeometry(QtCore.QRect(240, 160, 100, 20))
        self.n_steps_label.setFont(font)
        self.n_steps_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.n_steps_label.setAlignment(QtCore.Qt.AlignCenter)
        self.n_steps_label.setObjectName("n_steps_label")
        self.n_steps.setProperty("value", 58)

        # bins_per_octave
        self.bins_per_octave.setGeometry(QtCore.QRect(410, 0, 22, 160))
        self.bins_per_octave.setOrientation(QtCore.Qt.Vertical)
        self.bins_per_octave.setObjectName("bins_per_octave")
        self.bins_per_octave.valueChanged.connect(self.bins_per_octaveSliderValue)
        # bins_per_octave_label
        self.bins_per_octave_label.setGeometry(QtCore.QRect(340, 160, 160, 21))
        self.bins_per_octave_label.setFont(font)
        self.bins_per_octave_label.setAlignment(QtCore.Qt.AlignCenter)
        self.bins_per_octave_label.setObjectName("bins_per_octave_label")
        self.bins_per_octave.setMinimum(12)
        self.bins_per_octave.setMaximum(24)
        self.bins_per_octave.setSingleStep(2)

        # set groupBox
        self.groupBox.setGeometry(QtCore.QRect(10, 250, 781, 301))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")

        # input device label
        self.InputDevice_label.setGeometry(QtCore.QRect(60, 30, 221, 20))
        self.InputDevice_label.setObjectName("InputDevice_label")
        # input device combo
        self.InputDevice_Combo.setGeometry(QtCore.QRect(60, 60, 221, 31))
        self.InputDevice_Combo.setObjectName("InputDevice_Combo")
        self.InputDevice_Combo.addItem("")
        self.InputDevice_Combo.addItem("")
        # input volume label
        self.InputVolume_label.setGeometry(QtCore.QRect(60, 130, 221, 21))
        self.InputVolume_label.setObjectName("InputVolume_label")
        # input volume bar
        self.InputVolume_bar.setGeometry(QtCore.QRect(60, 160, 221, 22))
        self.InputVolume_bar.setMaximum(100)
        self.InputVolume_bar.setProperty("value", 100)
        self.InputVolume_bar.setOrientation(QtCore.Qt.Horizontal)
        self.InputVolume_bar.setObjectName("InputVolume_bar")
        self.InputVolume_bar.valueChanged.connect(self.InSliderValue)
        # input volume value label
        self.InputVolumeValue_label.setGeometry(QtCore.QRect(290, 160, 50, 20))
        self.InputVolumeValue_label.setText("")
        self.InputVolumeValue_label.setObjectName("input_volume_value")
        self.InputVolumeValue_label.setText(str(self.InputVolume_bar.value()) + "%")

        # OutputDevice_label
        self.OutputDevice_label.setGeometry(QtCore.QRect(450, 30, 221, 20))
        self.OutputDevice_label.setObjectName("OutputDevice_label")
        self.OutputDevice_Combo.setGeometry(QtCore.QRect(450, 60, 221, 31))
        # Output device Combo
        self.OutputDevice_Combo.setObjectName("OutputDevice_Combo")
        self.OutputDevice_Combo.addItem("")
        self.OutputDevice_Combo.addItem("")
        # Output volume label
        self.OutputVolume_label.setGeometry(QtCore.QRect(450, 130, 221, 21))
        self.OutputVolume_label.setObjectName("OutputVolume_label")
        # Output volume bar
        self.OutputVolume_bar.setGeometry(QtCore.QRect(450, 160, 221, 22))
        self.OutputVolume_bar.setMaximum(100)
        self.OutputVolume_bar.setProperty("value", 100)
        self.OutputVolume_bar.setOrientation(QtCore.Qt.Horizontal)
        self.OutputVolume_bar.setObjectName("OutputVolume_bar")
        self.OutputVolume_bar.valueChanged.connect(self.OutSliderValue)
        # Output volume value label
        self.OutputVolumeValue_label.setGeometry(QtCore.QRect(680, 160, 50, 20))
        self.OutputVolumeValue_label.setText("")
        self.OutputVolumeValue_label.setObjectName("output_volume_value")
        self.OutputVolumeValue_label.setText(str(self.OutputVolume_bar.value()) + "%")

        # test button
        self.test_btn.setGeometry(QtCore.QRect(60, 230, 81, 31))
        self.test_btn.setObjectName("pushButton")
        # test volume bar
        self.TestVolumeBar.setGeometry(QtCore.QRect(170, 240, 601, 16))
        self.TestVolumeBar.setFocusPolicy(QtCore.Qt.NoFocus)
        self.TestVolumeBar.setProperty("value", 0)
        self.TestVolumeBar.setFormat("")
        self.TestVolumeBar.setObjectName("TestVolumeBar")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Man to girl voice changer"))
        self.groupBox.setTitle(_translate("MainWindow", "settings"))
        self.InputDevice_Combo.setItemText(0, _translate("MainWindow", "Default"))
        self.InputDevice_Combo.setItemText(1, _translate("MainWindow", sd.query_devices(kind="input")["name"]))
        self.InputDevice_label.setText(_translate("MainWindow", "Input device"))
        self.OutputDevice_Combo.setItemText(0, _translate("MainWindow", "Default"))
        self.OutputDevice_Combo.setItemText(1, _translate("MainWindow", sd.query_devices(kind="output")["name"]))
        self.OutputDevice_label.setText(_translate("MainWindow", "Output device"))
        self.InputVolume_label.setText(_translate("MainWindow", "Input volume"))
        self.OutputVolume_label.setText(_translate("MainWindow", "Output volume"))
        self.test_btn.setText(_translate("MainWindow", "Test"))
        self.IsChanging_label.setText(_translate("MainWindow", ""))
        self.bins_per_octave_label.setText(
            _translate("MainWindow", "bins_per_octave " + str(self.bins_per_octave.value())))
        self.n_steps_label.setText(_translate("MainWindow", "n_steps " + str(self.n_steps.value() / 10)))
        self.Denoise.setText(_translate("MainWindow", "Denoise? N"))

    def mic_clicked(self):
        if self.Is_micOn:
            self.mic_btn.setIcon(self.media_manager.mic_off_icon)
            self.Is_micOn = False

        else:
            self.mic_btn.setIcon(self.media_manager.mic_on_icon)
            self.Is_micOn = True

    def voice_changing(self):
        if self.Is_changing:
            self.IsChanging_label.setText("")
            self.IsChanging.setIcon(self.media_manager.off_air_btn_icon)
            self.Is_changing = False
        else:
            self.IsChanging_label.setText("Changing")
            self.IsChanging.setIcon(self.media_manager.on_air_btn_icon)
            self.Is_changing = True

    def de_noise_btn(self):
        if self.Is_denoise:
            self.Denoise.setText("Denoise? N")
            self.Is_denoise = False
        else:
            self.Denoise.setText("Denoise? Y")
            self.Is_denoise = True

    def InSliderValue(self):
        self.InputVolumeValue_label.setText(str(self.InputVolume_bar.value()) + "%")

    def OutSliderValue(self):
        self.OutputVolumeValue_label.setText(str(self.OutputVolume_bar.value()) + "%")

    def n_stepsSliderValue(self):
        self.n_steps_label.setText("n_steps " + str(self.n_steps.value() / 10))

    def bins_per_octaveSliderValue(self):
        self.bins_per_octave_label.setText("bins_per_octave " + str(self.bins_per_octave.value()))

    # special thanks to https://youtu.be/s2K1JfNR7Sc
    # a hands to hands fft denoise tutorial/lecture
    def de_noise(self, data):
        fhat = np.fft.fft(data.squeeze(), self.n)
        power = fhat * np.conj(fhat)

        indices = power > 1
        fhat = indices * fhat

        plt.plot(self.freq[self.L], power.real[self.L])
        plt.xlim(self.freq[self.L[0]], 500)
        plt.show()

        return np.fft.ifft(fhat).real

    def smooth(self, data):
        # [0.25, 0.5, 0.25], [0.05, 0.2, 0.5, 0.2, 0.05]
        gaussian = np.array([0.05, 0.2, 0.5, 0.2, 0.05])
        average = np.array([1, 1, 1, 1, 1, 1, 1])/7
        return np.convolve(data, average, "same")

    #Extract Freq in similar to remove noise
    def extract_freq(self, data):
        length = (int) (self.n)
        fhat = np.fft.fft(data.squeeze(), self.n)
        psd = fhat * np.conj(fhat) / self.n

        indices = psd > 1
        fhat = indices * fhat
        psdClean = indices * psd

        fhat2 = np.zeros(self.n,dtype=np.complex)
        divi = (int)(self.n_steps.value())
        half = (int) (length/divi)
        for i in range(half):
            fhat2[divi * i] = (fhat[(divi-1)*i] + 0)/2
            fhat2[divi * (i + 1) - 1] = (fhat[(divi - 1) * (i+1) - 1] + 0) / 2
            for j in range(divi - 1):
                fhat2[divi * i + j + 1] = (fhat[(divi-1)*i+j] + fhat[(divi-1)*i+j+1])/2
        fhat2 = 0.88 * fhat2

        psd2 = fhat2 * np.conj(fhat2) / self.n
        indices2 = psd2 > 1
        psdClean2 = indices2 * psd2

        plt.plot(self.freq[self.L], psdClean.real[self.L])
        plt.plot(self.freq[self.L], psdClean2.real[self.L])
        plt.xlim(self.freq[self.L[0]], 500)

        plt.show()

        return np.fft.ifft(fhat2).real

    def handleNewData(self, indata, outdata, frames, time, status):
        copy = indata.copy()
        indata *= 3
        # de noice
        if self.Is_denoise:
            indata = self.extract_freq(indata)
            #indata = self.de_noise(indata)
        else:
            pass

        indata *= self.InputVolume_bar.value() / 100
        """ handles the asynchroneously collected sound chunks """
        if self.Is_micOn:
            if self.Is_changing:
                # preform man to girl voice change

                indata = indata.squeeze()
                # indata = librosa.effects.pitch_shift(indata, self.sr,
                #                                      n_steps=self.n_steps.value()/10,
                #                                      bins_per_octave=self.bins_per_octave.value(),
                #                                      res_type="kaiser_best")
                indata = 0.25 * librosa.effects.pitch_shift(indata, self.sr,
                                                            n_steps=self.n_steps.value() / 10,
                                                            bins_per_octave=self.bins_per_octave.value(),
                                                            res_type="kaiser_fast") + \
                         0.75 * librosa.effects.pitch_shift(indata, self.sr,
                                                            n_steps=self.n_steps.value() * 1.5 / 10,
                                                            bins_per_octave=self.bins_per_octave.value(),
                                                            res_type="kaiser_fast")
                indata = self.smooth(indata)
                indata = np.array([indata])

                # print(indata.T.shape)
                outdata[:] = indata.T
                # print(outdata)
            else:
                indata = np.array([indata])
                outdata[:] = indata.T
            outdata *= (self.OutputVolume_bar.value() / 100)

        else:
            outdata[:] = np.zeros(copy.shape)
            outdata *= (self.OutputVolume_bar.value()) / 100

        self.VolumeBar.setValue(int(outdata.max() * 100))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()

    with sd.Stream(samplerate=ui.sr, blocksize=ui.sr, callback=ui.handleNewData):
        sys.exit(app.exec_())
